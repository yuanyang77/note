基本数据类型：
  1.布尔型
    布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。
	0值为false

  2.数字类型
    整型 int 和浮点型 float，Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码。
    0值为0
	
  3.字符串类型:
    字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本。
    0值为空
	
  4.派生类型:
   包括：
    (a) 指针类型（Pointer）
    (b) 数组类型
    0值为[]  
		
    (c) 结构化类型(struct)
    (d) Channel 类型
    (e) 函数类型
    (f) 切片类型
    (g) 接口类型（interface）
    (h) Map 类型

一、数字类型
  1.uint8
    无符号 8 位整型 (0 到 255)
    0值为0
	
  2.uint16
    无符号 16 位整型 (0 到 65535)

  3.uint32
    无符号 32 位整型 (0 到 4294967295)
    0值为0
	
  4.uint64
    无符号 64 位整型 (0 到 18446744073709551615)
    0值为0
	
  5.int8
    有符号 8 位整型 (-128 到 127)
    0值为0
	
  6.int16
    有符号 16 位整型 (-32768 到 32767)
    0值为0
	
  7.int32
    有符号 32 位整型 (-2147483648 到 2147483647)
    0值为0
	
  8.int64
    有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)
    0值为0
	
二、浮点型：

  1.float32
    IEEE-754 32位浮点型数

  2.float64
    IEEE-754 64位浮点型数

  3.complex64
    32 位实数和虚数
    
  4.complex128
    64 位实数和虚数

三、其他数字类型

  1.byte
    类似 uint8
    
  2.rune
    类似 int32
    
  3.uint
    32 或 64 位
    
  4.int
    与 uint 一样大小
    
  5.uintptr
    无符号整型，用于存放一个指针,足够保存32位或者64位整数型。
	
  6.接口类型（interface）
     interface
	 
  7.函数类型
    func
	
  8.引用类型
    slice、map、chan(用于并发)
	
  9.其他值类型
    array、struct、string