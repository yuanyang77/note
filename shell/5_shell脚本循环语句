循环语句：流程控制
1.循环简介
三个循环语句：	for, while, until	
循环：		将循环体代码执行0、1或多次；
进入条件：	进入循环的条件
退出条件：	循环终止的条件

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
2、for循环
（1）for循环结构：
	for VARIABLE in LIST; do
		循环体
	done
循环进入条件：	列表非空；
循环退出条件：	列表遍历结束

语法结构示例：
	for username in user1 user2 user3; do
		循环体
	done

	实例：添加10个用户，user1-user10；
		#!/bin/bash
		#
		for username in user1 user2 user3 user4 user5; do
		    if id $username &> /dev/null; then
			echo "$username exists."
		    else
			useradd $username
		        echo "Add user $username finished."
		    fi
		done

（2）LIST：	是由一个或多个空格或换行符分隔开的字符串组成；
		把列表的每个字符串逐个赋值给VARIABLE表示的变量；
for循环LIST的生成方法：
	(1) 整数列表
		(a) {start..end}
		(b) $(seq [start [[stop]] end)
	(2) 直接给出列表
	(3) glob
	(4) 命令生成

	示例：数值列表
		#!/bin/bash
		#
		for i in {1..10}; do
		    if id user$i &> /dev/null; then
			echo "user$i exists."
		    else
			useradd user$i
			echo "Add user user$i finished."
		    fi
		done
					 
	示例：glob
		#!/bin/bash
		#
		for filename in /var/log/*; do
		    file $filename
		done

	示例：命令生成列表
		#!/bin/bash
		#
		for username in $(cut -d: -f1 /etc/passwd); do
		    echo "$username primary group: $(id -n -g $username)."
		done

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

while循环：
	while CONDITION; do
		循环体
		控制变量的修正表达式
	done

进入条件：当CONDITION为“真”；
退出条件：当CONDITION为“假”；


示例：求100以内所有正整数之和；

#!/bin/bash
#
declare -i sum=0
declare -i i=1

while [ $i -le 100 ]; do
	let sum+=$i
	let i++
done

echo "Sum: $sum."

练习：分别求100以内所有奇数之和，及所有偶数之和；

示例：打印九九乘法表
				#!/bin/bash
				#
				declare -i i=1
				declare -i j=1

				while [ $j -le 9 ]; do
				    while [ $i -le $j ]; do
						echo -e -n "${i}X${j}=$[$i*$j]\t"
						let i++
				    done
				    echo
				    let i=1
				    let j++
				done

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

unitl循环：
	until CONDITION; do
		循环体
		循环控制变量的修正表达式
	done

	进入条件：当CONDITION为“假”时
	退出条件：当CONDITION为“真”时

	示例：求100以内所有正整数之和
		#!/bin/bash
		#
		declare -i sum=0
		declare -i i=1

		until [ $i -gt 100 ]; do
		    let sum+=$i
		    let i++
		done

		echo "Sum: $sum."

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

循环控制：
	continue [n]：提前结束本轮循环，而直接进入下一轮；
	break [n]：提前结束循环；

while循环：
	while CONDITION; do
		.......
		if CONDITION2; then
			break [n]
		fi
	done

	while CONDITION; do
		......
		if CONDITION2; then
			continue [n]
		fi
		......
	done

示例：求100以内所有偶数之和；

				#!/bin/bash
				#
				declare -i sum=0
				declare -i i=0

				while [ $i -le 100 ]; do
				    let i++
				    if [ $[$i%2] -eq 1 ]; then
					echo "$i is a odd."
				        continue
				    fi
				    let sum+=$i
				done

				echo "Sum: $sum."

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

死循环：
	while true; do
		循环体
		if CONDTION; then
			break
		fi
	done

	until false; do
		循环体
		if CONDITION; then
			break
		fi
	done

示例：每隔3秒钟查看当前系统上是否有名为“gentoo”的用户登录；
	如果某次查看gentoo登录了，则显示gentoo已经登录；
	如果未登录，就显示仍然未来，并显示这是已经是第多少次查看了；

				#!/bin/bash
				#
				username=$1
				declare -i count=0

				while true; do
				    if who | grep "^$username" &> /dev/null; then 
						echo "$username is logged."
					 	break
				    else
					  	let count++
						echo "$count $username is not login."
				    fi
				    sleep 3
				done


				#!/bin/bash
				#
				declare -i count=0
				username=$1

				if [ $# -lt 1 ]; then
				    echo "At lease one argument."
				    exit 1
				fi

				if ! id $username &> /dev/null; then
				    echo "No such user."
				    exit 2
				fi

				until who | grep "^$username" &> /dev/null; do
				    let count++
				    echo "$count $username is not login."
				    sleep 3
				done

				echo "$username is logged on."

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
循环的特殊用法：

1.while循环的特殊用法：
	遍历文件的每一行：
		while read VARIABLE; do
			循环体
		done < /PATH/FROM/SOME_FILE

	示例：找出UID为偶数的所有用户，显示其用户名和ID号；
		#!/bin/bash
		#
		while read line; do
		    userid=$(echo $line | cut -d: -f3)
		    if [ $[$userid%2] -eq 0 ]; then
				echo $line | cut -d: -f1,3
		    fi
		done < /etc/passwd

2.for循环的特殊用法：
		for ((expr1;expr2;expr3)); do
			循环体
		done

		expr1: 定义控制变量，并初始赋值；
		expr2: 循环控制条件；
			进入条件：控制条件为“真”
			退出条件：控制条件为“假”
		expr3: 修正控制变量

示例：求100以内所有正整数之和；
				#!/bin/bash
				#
				declare -i sum=0

				for ((i=1;i<=100;i++)); do
				    let sum+=$i
				done

				echo "Sum: $sum."				

