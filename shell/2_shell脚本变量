变量：可变化的量，命名内存空间
bash环境：
本地变量：当前shell进程；
	定义变量： [set]Var_Name="Value"
	引用变量： ${Var_Name}
	撤销变量： unset Var_Name
	声明为整型：
	declare -i name[=value]
	let name=value
	变量名：只能包含数字、字母和下划线；且不能以数字开头；
	弱引用: "", 其内部的变量引用会被替换为变量值；
	强引用：''，其变量的变量引用会保持原有字符；
	命令引用：`COMMAND`, $(COMMAND)，引用命令的执行结果；

环境变量：当前shell进程及其子进程；	被“导出”的本地变量
	直接生成变量为环境变量：
	export Var_Name="Value"
	先定义本地变量，再使用export命令导出为环境变量
	Var_Name="Value"
	export Var_Name
	declare -x name[=value]

局部变量：某个函数执行过程；
	local Var_Name="Value"

位置参数变量：在脚本中引用传递给脚本的参数；在函数中引用传递给函数的参数；
	$1, $2, $3...$n
	./script-name.sh 2 8
	$0: 表示当前执行的进程名,script 本身的名字,或者在正则表达式中表示整行输出
	$1: 传递给该shell脚本的第一个参数
	$2: 传递给该shell脚本的第二个参数
	$#: 位置参数的个数
	$@: 引用所有的位置参数,将所有的位置参数分别显示
	$*: 将所有的位置参数当做一个整体的字符串来显示

特殊变量：
	$?: 上一条命令的执行状态；
	状态用数字来表示：0-255;
	0: 成功
	1-255: 失败 （1、2、127 是系统预留的）
	$!: 在后台运行的最后的工作的PID(进程ID).
	$$: 脚本自身的进程ID.这个变量经常用来构造一个"unique"的临时文件名.


变量类型：
	数值，字符；
	数值：
	整数
	浮点数
	字符：
		ASCII
		二进制数值
				
变量类型的作用：
		存储空间
		运算
		存储格式

语言对变量类型的支持力度：
		强类型：
		弱类型：变量类型不严格区分；
			默认存储机制：bash为字符

bash的变量使用特点：弱类型、无须事先声明；
		
