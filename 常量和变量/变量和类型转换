1、单个变量的声明与赋值方法

	1）变量的声明格式：var   变量名称   变量类型
	   变量的赋值格式：变量名称  =  表达式
		var a int
		a = 10
		


	2）声明的同时赋值：var 变量名称 [变量类型] = 表达式
	    var a int = 10
		var b string = "abc hello"
		
	3）声明变量和赋值，不指定类型
		var a = 10  //这种不指定类型的方式，系统会通过赋值自动推导出类型
		var b = flase
	
2、多个变量的声明与赋值
   注意：局部变量不可以使用 var() 的方式简写，只能使用并行方式

	1）全局变量的声明可使用 var() 的方式进行简写
	   //同时声明多个变量，并在后面赋值
			var (                           
			aa bool
			bb int
			cc float64
			dd uint32
			ff int
		    )
			aa, bb, cc, dd, ff = true, 10, 1.22, 3, 10
			
	   //同时声明多个变量并给变量赋值
			var (                 
			aaa = "hello"
			sss,bbb = 1, 2
			)
			
	   //同时声明多个变量并给变量赋值并指定类型
	        var (
			a int = 10
			b bool = true
			c string = "hello"
			)
			
	2）全局变量的声明不可以省略 var，但可使用并行方式
	   
		var a, b, c, d int        //使用并行的方法同时声明多个变量的声明
		a, b, c, d = 1, 2, 3, 4   //使用并行的方法给多个变量的赋值
		
		var e, f, g, h int = 5, 6, 7, 8  //多个变量声明的同时赋值
	
	3）所有变量都可以使用类型推断
	
		//多个变量声明，省略了变量类型，由系统自动推导
		var i, j, k, l = 9, 10, 11, 12   
	
	4）多个变量声明与赋值最简单的写法，省略了var关键字和类型。
	   注意：这种方法只能在局部变量中使用，不能在全局变量中使用。
	    i, m, n, o := 13, 14, 15, 16
	    
		
3、变量的类型转换
	Go中不存在隐式转换，所有类型转换必须显式声明
	转换只能发生在两种相互兼容的类型之间
	类型转换的格式：
	<ValueA> [:]= <TypeOfValueA>(<ValueB>)
	
	//以下是正确的转换方法，两个互相兼容的类型之间才能进行转换
	var a float32 = 1.1
	b := int(a)
	
	//以下转换表达式无法通过编译
	var c bool = true
	d := int(c)
	

   